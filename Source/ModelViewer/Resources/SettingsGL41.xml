<?xml version="1.0"?>
<Settings>
  <Systems>
    <GCDTaskingSystem/>
    <GLGraphicSystem>
      <Version major="4" minor="1"/>
      <Windows>
        <Window title="Model Viewer" type="resizable">
          <position>100, 100</position>
          <size>512, 512</size>
        </Window>
      </Windows>
      <Shaders>
        <Shader name="Header" type="header">
          #version 410
          struct ViewStruct {
            mat4 view;
            mat4 projection;
            vec4 position;
          };
          struct ModelStruct {
            mat4 model;
            vec4 rotation;
          };
        </Shader>
        <Shader name="SimpleVertex" type="vertex">
          #include "Header"
          in vec4 Position;
          uniform mat4 Model;
          uniform mat4 View;
          uniform mat4 Projection;
          void main() {gl_Position = Projection * View * Model * Position;}
        </Shader>
        <Shader name="SimpleColor" type="fragment">
          #include "Header"
          uniform vec4 Color;
          out vec4 FragColor;
          void main() {FragColor = Color;}
        </Shader>
        <Shader name="SimpleVertexUV" type="vertex">
          #include "Header"
          in vec4 Position;
          in vec2 UV_0;
          out vec2 UV;
          void main() {
            gl_Position = Position;
            UV = UV_0;
          }
        </Shader>
        <Shader name="VertexUV" type="vertex">
          #include "Header"
          in vec4 Position;
          in vec2 UV_0;
          uniform mat4 Model;
          uniform mat4 View;
          uniform mat4 Projection;
          out vec2 UV;
          void main() {
            gl_Position = Projection * View * Model * Position;
            UV = UV_0;
          }
        </Shader>
        <Shader name="TextUV" type="vertex">
          #include "Header"
          in vec4 Position;
          in vec2 UV_0;
          in vec4 Locs;
          in vec4 UVs;
          uniform mat4 Model;
          uniform mat4 View;
          uniform mat4 Projection;
          out vec2 UV;
          vec4 adjustPos(vec4 pos, vec4 loc) {
            pos.x = (pos.x * loc.z) + loc.x;
            pos.y = (pos.y * loc.w) + loc.y;
            return pos;
          }
          vec2 adjustUV(vec2 uv, vec4 adj) {
            uv.x = (1.0-uv.x) * adj.x + uv.x * adj.z;
            uv.y = uv.y * adj.y + (1.0-uv.y) * adj.w;
            return uv;
          }
          void main() {
            gl_Position = Projection * View * Model * adjustPos(Position, Locs);
            UV = adjustUV(UV_0, UVs);
          }
        </Shader>
        <Shader name="SimpleTexture" type="fragment">
          #include "Header"
          in vec2 UV;
          uniform sampler2D tex2D;
          out vec4 FragColor;
          void main() {FragColor = texture(tex2D, UV);}
        </Shader>
        <Shader name="SimpleNormal" type="vertex">
          #include "Header"
          in vec4 Position;
          in vec4 Normal;
          uniform mat4 Model;
          uniform mat4 View;
          uniform mat4 Projection;
          uniform mat4 Rotation;
          out vec3 vNormal;
          void main() {
            gl_Position = Projection * View * Model * Position;
            vNormal = (Rotation * Normal).xyz;
          }
        </Shader>
        <Shader name="DirectLight" type="fragment">
          #include "Header"
          in vec3 vNormal;
          uniform vec4 Color;
          out vec4 FragColor;
          void main() {
            FragColor = vec4(Color.xyz * dot(vNormal, vec3(0.0, 1.0, 0.0)), Color.w);}
        </Shader>
      </Shaders>
    </GLGraphicSystem>
  </Systems>
</Settings>